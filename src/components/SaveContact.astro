---
// SaveContact.astro (Astro component)
const contact = {
  firstName: "Eric",
  lastName: "Rosario",
  org: "ELR Restoration Inc",
  title: "Mold Inspector",
  phone: "+14074849522",
  email: "ericelrrestoration@gmail.com",
  url: "https://linktr.ee/elrrestoration",
  street: "2202 N Westshore Blvd, Suite 200",
  city: "Tampa",
  region: "Florida",
  postal: "33607",
  country: "United States",
  note: "Contacto desde la web"
};
---
<button class="save-contact-btn px-4 py-2 rounded-[10px] border w-full text-[14px] font-bold leading-[18px] cursor-pointer" data-contact={JSON.stringify(contact)}>Save to contacts</button>

<script type="module">
  // contact JSON is embedded on the button's data-contact attribute
  function buildVCard(c) {
    const lines = [
      "BEGIN:VCARD",
      "VERSION:3.0",
      `FN:${c.firstName} ${c.lastName}`,
      `N:${c.lastName};${c.firstName};;;`,
      c.org ? `ORG:${c.org}` : "",
      c.title ? `TITLE:${c.title}` : "",
      c.phone ? `TEL;TYPE=CELL,VOICE:${c.phone}` : "",
      c.email ? `EMAIL;TYPE=INTERNET:${c.email}` : "",
      c.url ? `URL:${c.url}` : "",
      (c.street || c.city) ? `ADR;TYPE=WORK:;;${c.street || ""};${c.city || ""};${c.region || ""};${c.postal || ""};${c.country || ""}` : "",
      c.note ? `NOTE:${c.note}` : "",
      "END:VCARD"
    ];
    return lines.filter(Boolean).join("\r\n"); // usar CRLF para compatibilidad
  }

  function isIOS() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  }

  async function saveContact(c) {
    console.debug('saveContact invoked', c);
    const contactToUse = c || {};
    const vcard = buildVCard(contactToUse);
    const blob = new Blob([vcard], { type: "text/vcard;charset=utf-8" });
    const filename = `${contactToUse.firstName || 'contact'}_${contactToUse.lastName || ''}.vcf`;

    // Crear File (necesario para navigator.share en Chrome Android)
    let file;
    try {
      file = new File([blob], filename, { type: "text/vcard" });
    } catch (e) {
      // algunos entornos no soportan File constructor; lo ignoramos y usamos blob
      file = null;
    }

    // 1) Intentar Web Share (Chrome Android y navegadores que lo soporten)
    if (file && navigator.canShare && navigator.canShare({ files: [file] })) {
      try {
        await navigator.share({
            files: [file],
            title: `${contactToUse.firstName || ''} ${contactToUse.lastName || ''}`,
            text: "Guardar contacto"
          });
        return;
      } catch (err) {
        // usuario cancel칩 o share fall칩 -> seguir a fallback
        console.warn("share failed:", err);
      }
    }

    // 2) iOS Safari: navegar al blob para que iOS lo abra (a menudo abre la vista previa y permite a침adir)
    if (isIOS()) {
      const url = URL.createObjectURL(blob);
      // Abrir en la misma pesta침a para que iOS muestre el archivo y ofrezca "Agregar a Contactos"
      window.location.href = url;
      // opcional: revocar luego
      setTimeout(() => URL.revokeObjectURL(url), 5000);
      return;
    }

    // 3) Fallback general: forzar descarga del archivo .vcf (el usuario lo abre y lo importa)
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
    document.body.appendChild(a);
    a.click();
    a.remove();
    setTimeout(() => URL.revokeObjectURL(url), 5000);
  }

  // Use event delegation so the handler works even if button is added later
  try {
    if (!window.__saveContactDelegationInstalled) {
      window.__saveContactDelegationInstalled = true;
      document.addEventListener('click', (e) => {
        const target = e.target;
        if (!(target instanceof Element)) return;
        // check if clicked element or its ancestor has the class
        const btn = target.closest('.save-contact-btn');
        if (btn) {
          console.debug('Save contact button clicked');
          try {
            // read contact from button dataset
            let c = null;
            try {
              c = btn.dataset.contact ? JSON.parse(btn.dataset.contact) : null;
            } catch (err) {
              console.error('Failed to parse contact dataset', err);
            }
            saveContact(c);
          } catch (err) {
            console.error('saveContact failed:', err);
          }
        }
      });
    }
  } catch (err) {
    console.error('Failed to install delegated save contact listener:', err);
  }
</script>
